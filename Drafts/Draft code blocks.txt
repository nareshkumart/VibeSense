@interact
def keywords_display(Meeting_ID = list(key_df['Meeting_ID'].unique()),Group_ID = list(key_df['Group'].unique())):
    filter_df = key_df[(key_df['Meeting_ID'] == Meeting_ID) & (key_df['Group'] == Group_ID)]
    plt.figure(figsize = (8,3), facecolor = None)
    plt.bar(filter_df['Words'], filter_df['Occurences'])
    plt.title('Frequently used words')
    plt.xticks(fontsize = 12, rotation = 90, ha = 'right')
    plt.ylabel('Occurences')
    plt.show()

def addlabels(x,y):
    for i in range(len(x)):
        plt.text(i,y[i],y[i])

@interact
def meeting_group_wise_display(Meeting_ID = list(sentiment_df['Meeting_ID'].unique()),Group_no = list(sentiment_df['Group'].unique())):
    filter_df = sentiment_df[(sentiment_df['Meeting_ID'] == Meeting_ID) & (sentiment_df['Group'] ==  Group_no)]
    plt.figure(figsize = (8,8), facecolor = None)
    text = " ".join(filter_df['Speaker_text'].astype(str).tolist())
    stopwords_list = [
        'think', 'on', 'not', 'they', "it's", 'also', 'from', 'do', 'your','would', 'i', 'any', 'right?', 'then', 'but', 'yes', 'what', 'one','point','guys', "i'm", 'all', 'if', 'in', 'thing', 'was', 'or', 'because','get','now', 'just', 'no', 'my', 'should', 'me', 'could', 'at', 'only','go','giving', 'anything', "that's", 'very', "don't", 'is', 'can', 'ok','know', 'yeah', 'yeah.', 'it', 'are', 'be', 'for', 'this', 'with','kind','uh.', 'will', 'yeah,','give','make',"we'll",'again','coming','say','hey','are', 'of', 'you', 'that', 'we', 'to', 'have', 'a', 'hello', 'Uh','thank','Uh,', 'sure.', 'sure', 'So', 'the', 'some', 'some,', 'The.', 'The','see',        'there', "there's", 'the', 'Hi', 'hi', 'umm', 'guess', 'Guess', 'oh','got',        'um', 'uh', 'er', 'ah', 'like', 'well', 'and', 'so', 'right','which','something',        'literally', 'okay', 'totally', 'basically', 'actually','them', 'as', 'how',        'out', 'were','maybe','much','want','other','who','these','more','where','our',        'take','done','next','hmm','mmm','things','us','everyone','come','people','mean'] + stopwords.words('english')
    wordcloud = WordCloud(width= 800, height= 800,background_color = 'white',stopwords = stopwords_list).generate(text)
    word_frequency = wordcloud.words_
    plt.imshow(wordcloud, interpolation = 'bilinear')
    plt.axis("off")
    plt.figure(figsize = (7,4), facecolor = None)
    temp_df = filter_df.sort_values(by = 'time_seconds',ascending = False).head(6)
    temp_df['time_percentage'] = (temp_df['time_percentage']*100).round(1)
    plt.xticks(fontsize = 12, rotation = 90, ha = 'right')
    print("Total Duration of the meet: " + str(((filter_df['time_seconds'].sum())/60).round(0)) + " minutes")
    plt.bar(temp_df['Speaker_Name'],temp_df['time_percentage'])
    addlabels(list(temp_df['Speaker_Name']),list(temp_df['time_percentage']))
    plt.ylabel("Speaking Duration (in seconds)")
    plt.show()

@interact
def time_percentage(Meeting_ID = list(sentiment_df['Meeting_ID'].unique())):
    filter_df = sentiment_df[(sentiment_df['Meeting_ID'] == Meeting_ID)]
    filter_df = filter_df.sort_values(by = 'time_percentage', ascending = False)
    filter_df['Cum_percent'] = filter_df['time_percentage'].cumsum()
    
    #Create Bar diagram
    plt.bar(filter_df['Speaker_Name'], filter_df['time_percentage'])
    
    #add a cumulative percentage line
    plt.plot(filter_df['Speaker_Name'], filter_df['Cum_percent'], color = 'red', marker = 'o')
    
    #plot the word cloud
    #plt.figure(figsize = (8,8), facecolor = None)
    plt.title('Time_Percentage by Name')
    plt.xticks(fontsize = 12, rotation = 90, ha = 'right')
    plt.xlabel('Speaker Name')
    plt.ylabel('Percentage')
    plt.show()

@interact
def word_cloud(Meeting_ID = list(sentiment_df['Meeting_ID'].unique())
               , Speaker_Name = list(sentiment_df['Speaker_Name'].unique())):
    filter_df = sentiment_df[(sentiment_df['Meeting_ID'] == Meeting_ID) & 
                             (sentiment_df['Speaker_Name'] == Speaker_Name)]
                             
    text = " ".join(filter_df['Speaker_text'].astype(str).tolist())
    stopwords_list = stopwords.words('english')
    #additional stopwords
    add_stopwords = ['hello','know', 'yeah', 'see', 'uh', 'want', 'like', 'ok', 'guess', 'umm']
    stopwords_list += add_stopwords
    
    #Create Word Cloud
    wordcloud = WordCloud(width= 800, height= 800,background_color = 'white',stopwords = stopwords_list).generate(text)
    
    #Word Frequency
    word_frequency = wordcloud.words_
    print(list(word_frequency)[:10])
    
    #plot the word cloud
    plt.figure(figsize = (8,8), facecolor = None)
    plt.imshow(wordcloud, interpolation = 'bilinear')
    plt.axis("off")
    plt.show()

@interact
def review_distribution(Meeting_ID = list(sentiment_df['Meeting_ID'].unique())):
    filter_df = sentiment_df[(sentiment_df['Meeting_ID'] == Meeting_ID)]
    temp_df = pd.DataFrame(filter_df['Sentiment'].value_counts()).reset_index().rename(columns = {'index':'Sentiment','Sentiment':'Sentiment_count'})
    plt.figure(figsize = (6,8), facecolor = None)
    plt.title('Review Distribution')
    def f(cpt):
        if cpt == 0:
            return ''
        else:
            return  '%.2f' %cpt
    plt.pie(temp_df['Sentiment_count'], autopct = f, shadow = True, startangle = 90)
    plt.legend(temp_df['Sentiment'].unique())
    plt.show()

